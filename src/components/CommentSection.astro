---
interface Props {
  uri: string;
}

const { uri } = Astro.props;

// Get the post ID for the Bluesky link
const postId = uri.split('/').pop();
const blueskyLink = `https://bsky.app/profile/${uri.split('/')[2]}/post/${postId}`;
---

<div class="comments-section mt-8 pt-6" data-bluesky-uri={uri}>
  <h2 class="text-2xl font-bold pb-4">Comments</h2>
  <div class="rounded-2xl bg-stone-200/50 p-[1px] shadow-[inset_0_0_0_1px_rgba(255,255,255,0.4)] dark:bg-gray-900 mb-6">
    <div class="rounded-[1rem] bg-stone-300 p-4 dark:bg-stone-800">
      <p class="text-sm text-gray-700 dark:text-gray-300">
        Reply on Bluesky <a href={blueskyLink} target="_blank" rel="noopener noreferrer" class="font-bold text-orange-600 hover:text-orange-700 underline">here</a> to join the conversation.
      </p>
    </div>
  </div>

  <div class="comments-loader text-center py-8 text-gray-600 dark:text-gray-400">Loading comments...</div>
  <div class="comments-error text-center py-4 text-red-600 dark:text-red-400" style="display: none;"></div>
  <div class="comments-list space-y-4" style="display: none;"></div>

  <button class="refresh-comments mt-6 px-4 py-2 rounded-xl bg-stone-600 text-white text-sm font-bold uppercase hover:bg-stone-500 transition-colors duration-200">
    Refresh Comments
  </button>
</div>

<script>
  interface BlueskyPost {
  post: {
    author: {
      avatar: string;
      displayName: string;
      handle: string;
    };
    record: {
      text: string;
    };
    indexedAt: string;
    likeCount: number;
    repostCount: number;
    replyCount: number;
  };
  replies?: BlueskyPost[];
}

class CommentSection {
  private readonly uri: string;
  private readonly loader: HTMLElement;
  private readonly errorDiv: HTMLElement;
  private readonly commentsList: HTMLElement;
  private readonly refreshButton: HTMLElement;

  constructor(container: HTMLElement) {
    const uri = container.dataset.blueskyUri;
    if (!uri) {
      throw new Error('Bluesky URI is required');
    }
    this.uri = uri;

    const loader = container.querySelector('.comments-loader');
    const errorDiv = container.querySelector('.comments-error');
    const commentsList = container.querySelector('.comments-list');
    const refreshButton = container.querySelector('.refresh-comments');

    if (!loader || !errorDiv || !commentsList || !refreshButton) {
      throw new Error('Required DOM elements not found');
    }

    this.loader = loader as HTMLElement;
    this.errorDiv = errorDiv as HTMLElement;
    this.commentsList = commentsList as HTMLElement;
    this.refreshButton = refreshButton as HTMLElement;

    this.initialize();
  }

  private async initialize() {
    this.refreshButton.addEventListener('click', () => this.fetchComments());
    await this.fetchComments();

    // Auto-refresh comments every 5 minutes
    setInterval(() => this.fetchComments(), 5 * 60 * 1000);
  }

  private async fetchComments() {
    this.loader.style.display = 'block';
    this.errorDiv.style.display = 'none';
    this.commentsList.style.display = 'none';

    try {
      const endpoint = `https://api.bsky.app/xrpc/app.bsky.feed.getPostThread?uri=${encodeURIComponent(this.uri)}`;
      const response = await fetch(endpoint, {
        method: 'GET',
        headers: {
          'Accept': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      const comments = data.thread?.replies || [];

      this.renderComments(comments);
      this.loader.style.display = 'none';
      this.commentsList.style.display = 'block';
    } catch (error: unknown) {
      this.loader.style.display = 'none';
      this.errorDiv.style.display = 'block';

      const errorMessage = error instanceof Error
        ? error.message
        : 'An unknown error occurred';

      this.errorDiv.textContent = `Error loading comments: ${errorMessage}`;
    }
  }

    private renderComments(comments: BlueskyPost[]) {
      if (comments.length === 0) {
        this.commentsList.innerHTML = '<p class="no-comments">No comments yet. Be the first to comment!</p>';
        return;
      }

      this.commentsList.innerHTML = comments.map(comment => this.renderComment(comment)).join('');
    }

    private renderComment(comment: BlueskyPost): string {
  const date = new Date(comment.post.indexedAt).toLocaleDateString();

  const renderReplies = (replies: BlueskyPost[] = []): string => {
    if (replies.length === 0) return '';
    return `
      <div class="replies">
        ${replies.map(reply => {
          const replyDate = new Date(reply.post.indexedAt).toLocaleDateString();
          return `
            <div class="comment reply">
              <div class="comment-header">
                <img src="${reply.post.author.avatar}"
                     alt="${reply.post.author.displayName}'s avatar"
                     class="avatar"
                     style="width: 32px; height: 32px; border-radius: 50%; object-fit: cover;" />
                <div class="author-info">
                  <span class="author-name">${reply.post.author.displayName}</span>
                  <span class="author-handle">@${reply.post.author.handle}</span>
                </div>
              </div>
              <div class="comment-content">${reply.post.record.text}</div>
              <div class="comment-footer">
                <div class="interaction-counts">
                  <span>${reply.post.replyCount || 0} üí¨</span>
                  <span>${reply.post.repostCount || 0} üîÅ</span>
                  <span>${reply.post.likeCount || 0} ‚ù§Ô∏è</span>
                </div>
                <time datetime="${reply.post.indexedAt}">${replyDate}</time>
              </div>
              ${renderReplies(reply.replies)}
            </div>
          `;
        }).join('')}
      </div>
    `;
  };

  return `
    <div class="comment">
      <div class="comment-header">
        <img src="${comment.post.author.avatar}"
             alt="${comment.post.author.displayName}'s avatar"
             class="avatar"
             style="width: 32px; height: 32px; border-radius: 50%; object-fit: cover;" />
        <div class="author-info">
          <span class="author-name">${comment.post.author.displayName}</span>
          <span class="author-handle">@${comment.post.author.handle}</span>
        </div>
      </div>
      <div class="comment-content">${comment.post.record.text}</div>
      <div class="comment-footer">
        <div class="interaction-counts">
          <span>${comment.post.replyCount || 0} üí¨</span>
          <span>${comment.post.repostCount || 0} üîÅ</span>
          <span>${comment.post.likeCount || 0} ‚ù§Ô∏è</span>
        </div>
        <time datetime="${comment.post.indexedAt}">${date}</time>
      </div>
      ${renderReplies(comment.replies)}
    </div>
  `;
}

  }

  // Initialize all comment sections on the page
  document.querySelectorAll('.comments-section').forEach(container => {
    new CommentSection(container as HTMLElement);
  });
</script>

<style is:global>
  .comments-section .comment {
    border-radius: 1rem;
    background: linear-gradient(135deg, rgba(120, 113, 108, 0.1) 0%, rgba(168, 162, 158, 0.05) 100%);
    border: 1px solid rgba(120, 113, 108, 0.2);
    padding: 1rem;
    margin: 1rem 0;
    backdrop-filter: blur(10px);
    transition: all 0.2s ease;
  }

  .dark .comments-section .comment {
    background: linear-gradient(135deg, rgba(41, 37, 36, 0.8) 0%, rgba(68, 64, 60, 0.4) 100%);
    border: 1px solid rgba(120, 113, 108, 0.3);
  }

  .comments-section .comment:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .dark .comments-section .comment:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }

  .comments-section .comment-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
  }

  .comments-section .avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid rgba(120, 113, 108, 0.2);
  }

  .dark .comments-section .avatar {
    border: 2px solid rgba(168, 162, 158, 0.3);
  }

  .comments-section .author-info {
    display: flex;
    flex-direction: column;
    gap: 0.125rem;
  }

  .comments-section .author-name {
    font-weight: 600;
    color: #1c1917;
    font-size: 0.9rem;
  }

  .dark .comments-section .author-name {
    color: #f5f5f4;
  }

  .comments-section .author-handle {
    color: #78716c;
    font-size: 0.8rem;
  }

  .dark .comments-section .author-handle {
    color: #a8a29e;
  }

  .comments-section .comment-content {
    color: #292524;
    line-height: 1.6;
    margin-bottom: 0.75rem;
    font-size: 0.9rem;
  }

  .dark .comments-section .comment-content {
    color: #e7e5e4;
  }

  .comments-section .comment-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.8rem;
    color: #78716c;
    border-top: 1px solid rgba(120, 113, 108, 0.1);
    padding-top: 0.5rem;
  }

  .dark .comments-section .comment-footer {
    color: #a8a29e;
    border-top: 1px solid rgba(120, 113, 108, 0.2);
  }

  .comments-section .interaction-counts {
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  .comments-section .interaction-counts span {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    background: rgba(120, 113, 108, 0.1);
    border-radius: 0.5rem;
    transition: background-color 0.2s ease;
  }

  .dark .comments-section .interaction-counts span {
    background: rgba(68, 64, 60, 0.5);
  }

  .comments-section .interaction-counts span:hover {
    background: rgba(120, 113, 108, 0.2);
  }

  .dark .comments-section .interaction-counts span:hover {
    background: rgba(68, 64, 60, 0.7);
  }

  .comments-section .replies {
    margin-left: 2rem;
    margin-top: 1rem;
    padding-left: 1rem;
    border-left: 3px solid rgba(234, 88, 12, 0.3);
    position: relative;
  }

  .comments-section .replies::before {
    content: '';
    position: absolute;
    left: -3px;
    top: 0;
    bottom: 0;
    width: 3px;
    background: linear-gradient(to bottom, #ea580c, rgba(234, 88, 12, 0.1));
    border-radius: 2px;
  }

  .comments-section .reply {
    margin-top: 0.75rem;
  }

  .comments-section .reply .avatar {
    width: 32px;
    height: 32px;
  }

  .comments-section .no-comments {
    text-align: center;
    padding: 2rem;
    color: #78716c;
    font-style: italic;
    background: rgba(120, 113, 108, 0.05);
    border-radius: 1rem;
    border: 1px dashed rgba(120, 113, 108, 0.2);
  }

  .dark .comments-section .no-comments {
    color: #a8a29e;
    background: rgba(68, 64, 60, 0.3);
    border: 1px dashed rgba(120, 113, 108, 0.3);
  }

  .comments-section .refresh-comments:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  }

  .dark .comments-section .refresh-comments:hover {
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
  }

  .comments-section .comments-loader,
  .comments-section .comments-error {
    padding: 1.5rem;
    text-align: center;
    border-radius: 1rem;
  }

  .comments-section .comments-loader {
    background: rgba(120, 113, 108, 0.05);
    border: 1px solid rgba(120, 113, 108, 0.1);
  }

  .dark .comments-section .comments-loader {
    background: rgba(68, 64, 60, 0.3);
    border: 1px solid rgba(120, 113, 108, 0.2);
  }

  .comments-section .comments-error {
    background: rgba(239, 68, 68, 0.1);
    border: 1px solid rgba(239, 68, 68, 0.2);
  }

  .dark .comments-section .comments-error {
    background: rgba(239, 68, 68, 0.15);
    border: 1px solid rgba(239, 68, 68, 0.3);
  }
</style>